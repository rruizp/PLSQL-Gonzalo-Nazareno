1. Hacer un procedimiento que muestre el nombre y el salario del empleado cuyo código es 7082

create or replace procedure bol1ej1
is
  v_nombre emp.ename%TYPE;
  v_salario emp.sal%TYPE;
begin
  select ename, sal into v_nombre, v_salario
  from emp
  where empno='7082';
  dbms_output.put_line('Nombre: '||v_nombre||' Salario: '||v_salario);
end bol1ej1;

2. Hacer un procedimiento que reciba como parámetro un código de empleado y devuelva su nombre.

create or replace procedure bol1ej2 (p_codemp emp.empno%type)
is
  v_nombre emp.ename%TYPE;
begin
  select ename into v_nombre
  from emp
  where empno=p_codemp;
  dbms_output.put_line('Nombre: '||v_nombre);
end bol1ej2;

3. Crear un procedimiento PL/SQL que cuente el número de filas que hay en la tabla EMP (de Scott),
deposita el resultado en una variable y visualiza su contenido.

create or replace procedure bol1ej3
is
  v_numfilas number;
begin
  select count(*) into v_numfilas
  from emp;
  dbms_output.put_line('Nº Filas de la tabla EMP:: '||v_numfilas);
end bol1ej3;

4. Codificar un procedimiento que reciba una cadena y la visualice al revés.

create or replace procedure MostrarAlReves( p_cad VARCHAR2)
is
	v_aux VARCHAR2(30):='';
begin
	for i in reverse 1..length(p_cad) loop
		v_aux:=v_aux||substr(p_cad,i,1);
	end loop;
	dbms_output.put_line(v_aux);
end  MostrarAlReves;

o también

create or replace procedure MostrarAlReves( p_cad VARCHAR2)
is
	v_aux VARCHAR2(30):='';
begin
	for i in 1..length(p_cad) loop
		v_aux:=v_aux||substr(p_cad,-i,1);
	end loop;
	dbms_output.put_line(v_aux);
end  MostrarAlReves;

5. Escribir un procedimiento que reciba una fecha y escriba el año, en número, correspondiente a esa
fecha.

create or replace procedure MostrarAnyo(p_fecha DATE)
is
	v_anyo	NUMBER;
begin
	v_anyo := to_number(to_char(p_fecha,'YYYY'));
	dbms_output.put_line('Año: '||v_anyo);
end MostrarAnyo;

6. Codificar un procedimiento que reciba una lista de hasta 5 números y visualice su suma.

-- Comprobar si se puede dar un valor por defecto a los parámetros

CREATE OR REPLACE PROCEDURE MostrarSuma(p_num1 NUMBER, p_num2 NUMBER, p_num3 NUMBER, p_num4 NUMBER, p_num5 NUMBER)
IS
    v_suma NUMBER;
BEGIN
    v_suma:=p_num1+p_num2+p_num3+p_num4+p_num5;
    dbms_output.put_line('Suma: ' || v_suma);
END MostrarSuma;

7. Implementar un procedimiento que reciba un importe y visualice el desglose del cambio en unidades monetarias de 0.01, 0.02, 0.05, 0.10, 0.20, 0.50, 1, 2, 5, 10, 20, 50, 100, 200, 500 y 1000 € en orden inverso al que aparecen aquí enumeradas.

-- Este ejercicio quedaría mejor con un CASE

CREATE OR REPLACE PROCEDURE MostrarCambio(p_importe NUMBER)
IS
    v_cambio NUMBER:=p_importe;
    v_moneda NUMBER;
    v_cantidad NUMBER;
BEGIN
    dbms_output.put_line('Desglose de: ' || p_importe || ' euros.');
    WHILE v_cambio > 0 LOOP
        IF v_cambio >= 1000 THEN
            v_moneda:=1000;
        ELSIF v_cambio >= 500 THEN
            v_moneda:=500;
        ELSIF v_cambio >= 200 THEN
            v_moneda:=200;
        ELSIF v_cambio >= 100 THEN
            v_moneda:=100;
        ELSIF v_cambio >= 50 THEN
            v_moneda:=50;
        ELSIF v_cambio >= 20 THEN
            v_moneda:=20;
        ELSIF v_cambio >= 10 THEN
            v_moneda:=10;
        ELSIF v_cambio >= 5 THEN
            v_moneda:=5;
        ELSIF v_cambio >= 2 THEN
            v_moneda:=2;
        ELSIF v_cambio >= 1 THEN
            v_moneda:=1;
        ELSIF v_cambio >= 0.5 THEN
            v_moneda:=0.5;
        ELSIF v_cambio >= 0.2 THEN
            v_moneda:=0.2;
        ELSIF v_cambio >= 0.1 THEN
            v_moneda:=0.1;
        ELSIF v_cambio >= 0.05 THEN
            v_moneda:=0.05;
        ELSIF v_cambio >= 0.02 THEN
            v_moneda:=0.02;
        ELSE
            v_moneda:=0.01;
        END IF;
        v_cantidad:=TRUNC(v_cambio/v_moneda);
        v_cambio:=MOD(v_cambio,v_moneda);
        dbms_output.put_line('Billetes/monedas de ' || v_moneda || ': ' || v_cantidad);
    END LOOP;
END MostrarCambio;

8. Codificar un procedimiento que permita borrar un empleado cuyo número se pasará en la llamada.

create or replace procedure BorrarEmpleado (p_codemp emp.empno%TYPE)
is
begin
  delete emp
  where empno=p_codemp;
end BorrarEmpleado;

9. Escribir un procedimiento que modifique la localidad de un departamento. El procedimiento
recibirá como parámetros el número del departamento y la localidad nueva.

create or replace procedure CambiarLoc (p_numdept dept.deptno%TYPE, p_localidad dept.loc%TYPE)
is
begin
  update dept
  set loc = p_localidad
  where deptno=p_numdept;
  if SQL%ROWCOUNT=1 then
  	dbms_output.put_line('Registro modificado');
  else
  	dbms_output.put_line('Departamento no encontrado');
  end if;
end CambiarLoc;

10. Visualizar todos los procedimientos y funciones de usuarios almacenados en la base de datos y su situación (valid o invalid).

-- Esta sería la consulta sobre el diccionario de datos que nos daría esa información

SELECT OWNER, OBJECT_NAME, OBJECT_TYPE, STATUS
FROM ALL_OBJECTS
WHERE OBJECT_TYPE IN ('PROCEDURE','FUNCTION');

-- Para hacer un procedimiento necesitáis el concepto de cursores explícitos.

11. Realizar un procedimiento que reciba un número y muestre su tabla de multiplicar.

create or replace procedure MostrarTablaMultiplicar (p_num NUMBER)
is
begin
  for i in 1..9 loop
    dbms_output.put_line (p_num||'X'||i||'='||p_num*i);
  end loop;
end MostrarTablaMultiplicar;

12. Realiza un procedimiento que reciba dos números 'nota' y 'edad' y un carácter 'sexo' y muestre el mensaje 'ACEPTADA' si la nota es mayor o igual a cinco, la edad es mayor o igual a dieciocho y el sexo es 'M'. En caso de que se cumpla lo mismo, pero el sexo sea 'V', debe imprimir 'POSIBLE'.

CREATE OR REPLACE PROCEDURE AptoNoApto(p_nota NUMBER, p_edad NUMBER, p_sexo CHAR)
IS
BEGIN
    IF p_nota >= 5 AND p_edad >= 18 THEN
        IF p_sexo = 'M' THEN
            dbms_output.put_line('ACEPTADA');
        ELSIF p_sexo = 'V' THEN
            dbms_output.put_line('POSIBLE');
        END IF;
    ELSE
        dbms_output.put_line('NO APTO');
    END IF;
END AptoNoApto;

13. Procedimiento que recibe una letra e imprima si es vocal o consonante.

create or replace procedure MostrarVocaloConsonante (p_letra CHAR)
is
  v_resultado VARCHAR2(10):='Consonante';
begin
  if p_letra in ('A','E','I','O','U') then
    v_resultado := 'Vocal';
  end if;
  dbms_output.put_line(p_letra||' es una '||v_resultado);
end MostrarVocaloConsonante;

14. Procedimiento que reciba un número y escribe la cantidad de números pares que hay entre el 1 y el número indicado.

create or replace procedure ContadorPares (p_numero NUMBER)
is
    v_contador NUMBER :=1;
    v_contadorpares NUMBER :=0;
begin
    while v_contador<=p_numero loop
        if mod(v_contador,2)=0 then
                v_contadorpares:=v_contadorpares + 1;
        end if;
        v_contador:=v_contador + 1;
    end loop;
    dbms_output.put_line('Hay '||v_contadorpares||' pares desde el 1 al '||p_numero);
end ContadorPares;

15. Diseñar un procedimiento que muestre la suma de los números impares comprendidos entre dosvalores numéricos enteros y positivos recibidos por parámetros.

create or replace procedure SumaImpares (p_numero1 INT, p_numero2 INT)
is
    v_resultado NUMBER:=0;
begin
    if p_numero1 < 0 or p_numero2 < 0 then
        dbms_output.put_line('Se tienen que introducir numeros positivos');
    else
        for numero in p_numero1 .. p_numero2 loop
                if mod(numero,2)!=0 then
                        v_resultado:=v_resultado+numero;
                end if;
        end loop;
        dbms_output.put_line('La suma de los numeros impares es '||v_resultado);
    end if;
end;

16. Diseñar un procedimiento que recibe por parámetros dos valores numéricos que representan la
base y el exponente de una potencia donde el exponente es un número entero positivo o negativo. El
procedimiento visualiza el valor de la potencia, teniendo en cuenta las siguientes consideraciones:
1) Si la base y el exponente son cero, se mostrará un mensaje de error que diga "Datos erróneos".
2) Si el exponente es cero la potencia es 1.
3) Si el exponente es negativo la fórmula matemática de la potencia es pot = 1/base^exp. En este caso,
si la base es cero escribir un mensaje de "Datos erróneos".
Nota: No utilizar ninguna función que calcule la potencia.

create or replace function PotenciaPositiva (p_base NUMBER, p_exponente NUMBER)
return FLOAT
is
  v_resultado FLOAT:=1.0;
begin
  for i in 1..p_exponente loop
    v_resultado:=v_resultado*p_base;
  end loop;
  return v_resultado;
end PotenciaPositiva;

create or replace function PotenciaNegativa (p_base NUMBER, p_exponente NUMBER)
return FLOAT
is
  v_resultado FLOAT:=1.0;
begin
  if p_base=0 then
    raise_application_error(-20001,'Datos Erróneos');
  end if;
  v_resultado:=1/PotenciaPositiva(p_base,-1*p_exponente);
  return v_resultado;
end PotenciaNegativa;

create or replace procedure Potencia (p_base NUMBER, p_exponente NUMBER)
is
  v_resultado FLOAT:=1.0;
begin
  if p_base = 0 and p_exponente = 0 then
    raise_application_error(-20001,'Datos Erróneos');
   elsif p_exponente < 0 then
    v_resultado:= PotenciaNegativa(p_base, p_exponente);
   elsif p_exponente > 0 then
    v_resultado:= PotenciaPositiva(p_base, p_exponente);
  end if;
  dbms_output.put_line('Resultado= '||v_resultado);
end Potencia;

17. Cree una tabla Tabla_Numeros con un atributo valor de tipo INTEGER. Cree unprocedimientoque inserte números del 1 al 50. Compruebe los datos insertados en la tabla
Tabla_Numeros.

create or replace procedure InsertarDatos
is begin
    for i in 1 .. 50 loop
        insert into Tabla_Numeros values (i);
    end loop;
end InsertarDatos;
/

18. Borre el contenido de la tabla Tabla_Numeros utilizando la sentencia DELETE. Cree unprocedimiento que inserte del 10 al 1, excepto el 4 y el 5. Compruebe, de nuevo, los datos quecontiene la tabla Tabla_Numeros.

create or replace procedure BorrarDatos
is begin
    for i in 1 .. 50 loop
        delete from Tabla_Numeros where valor = i;
    end loop;
end BorrarDatos;

create or replace procedure InsertarRango
is begin
    BorrarDatos;
    for i in reverse 1 .. 10 loop
        if i not in (5,4) then
            insert into Tabla_Numeros values (i);
        end if;
    end loop;
end InsertarRango;

19. Cree una tabla Tabla_Articulos con los siguientes atributos: código,
nombre, precio e IVA. Introduzca datos de prueba utilizando la sentencia INSERT.
CREATE TABLE Tabla_Articulos (
codigo VARCHAR(5) PRIMARY KEY,
nombre VARCHAR(20),
precio NUMBER,
IVA NUMBER);

c) Construya un procedimiento que actualice el precio del artículo cuyo código es ‘A005’ según las
siguientes indicaciones:
− Si el artículo tiene un precio menor de 1 euro, su precio debe ser aumentado en 25 céntimos.
− Si está comprendido entre 1 euro y 10 euros su precio aumentará un 10 % .Si excede los 10
euros su precio aumentará en un 20 %.
− Si el precio es NULL, el aumento es 0.

d) Construya un procedimiento similar al del apartado c donde el usuario introduzca como
parámetroel código del artículo que desee modificar su precio.

create or replace function ObtenerPrecio (p_codart VARCHAR2)
return number
	v_precio NUMBER;
is
begin
	select precio into v_precio
	from Tabla_Articulos
	where codigo=p_codart;
	return v_precio;
exception
	when NO_DATA_FOUND then
		raise_application_error(-20001,'El artículo '||p_codart||' no existe');
end ObtenerPrecio;

create or replace procedure SubirPorcentaje (p_codart Tabla_Articulos.codigo%type,
					     porcentaje number)
is
	update Tabla_Articulos
	set precio = precio * (1+porcentaje/100)
	where codigo=p_codart;
end SubirPorcentaje;

create or replace procedure SubirCantidad (p_codart Tabla_Articulos.codigo%type,
					   cantidad number)
is
	update Tabla_Articulos
	set precio = precio + cantidad
	where codigo=p_codart;
end SubirCantidad;

create or replace procedure ModificarPrecio (p_codart Tabla_Articulos.codigo%type)
is
	v_precioantiguo Tabla_Articulos.precio%type(4);
begin
	v_precioantiguo:=ObtenerPrecio(p_codart);
	if v_precioantiguo is not null then
		if v_precioantiguo < 1 then
			SubirCantidad(p_codart,0.25);
		elsif v_precioantiguo < 10 then
			SubirPorcentaje(p_codart,10);
		else 	
			SubirPorcentaje(p_codart,20);
		end if;
	end if;
end ModificarPrecio;

20. Crear un procedimiento que en la tabla emp incrementar el salario el 10% a los empleados que
tengan una comisión superior al 5% del salario.

create or replace procedure IncrementarSalario
is
	update emp
	set sal = sal*1.1
	where 0.05*sal<nvl(comm,0);
	dbms_output.put_line(SQL%ROWCOUNT||' filas actualizadas');
end IncrementarSalario;

21. Crear un procedimiento que inserte un empleado en la tabla EMP. Su número será superior a los
existentes y la fecha de incorporación a la empresa será la actual.

create or replace procedure InsertarEmpleado
is
	v_empnomax emp.empno%type;
begin
	ComprobarSiTablaVacía;
	select max(empno) into v_empnomax
	from emp;
	insert into emp (empno, ename, hiredate)
	values (v_empnomax+1, 'PEPE', SYSDATE);
end InsertarEmpleado;

create or replace procedure ComprobarSiTablaVacia
is
	e_tabla_vacia exception;
	v_numempleados NUMBER;
begin
	select count(*) into v_numempleados
	from emp;
	if v_numempleados = 0 then 
		raise e_tabla_vacia;
	end if;
exception
	when e_tabla_vacia then
		insert into emp (empno, ename, hiredate)
		values (1, 'PEPE', SYSDATE);
		raise;
end;
